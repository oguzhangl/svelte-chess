{
  "version": 3,
  "sources": ["../src/memoize.js", "../src/index.ts"],
  "sourcesContent": ["//\r\n// Code from `fast-memoize`\r\n//\r\n\r\nfunction memoize(fn, options) {\r\n  var cache = options && options.cache ? options.cache : cacheDefault;\r\n\r\n  var serializer = options && options.serializer ? options.serializer : serializerDefault;\r\n\r\n  var strategy = options && options.strategy ? options.strategy : strategyDefault;\r\n\r\n  return strategy(fn, {\r\n    cache: cache,\r\n    serializer: serializer,\r\n  });\r\n}\r\n\r\n//\r\n// Strategy\r\n//\r\n\r\nfunction isPrimitive(value) {\r\n  return value == null || typeof value === 'number' || typeof value === 'boolean'; // || typeof value === \"string\" 'unsafe' primitive for our needs\r\n}\r\n\r\nfunction monadic(fn, cache, serializer, arg) {\r\n  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);\r\n\r\n  var computedValue = cache.get(cacheKey);\r\n  if (typeof computedValue === 'undefined') {\r\n    computedValue = fn.call(this, arg);\r\n    cache.set(cacheKey, computedValue);\r\n  }\r\n\r\n  return computedValue;\r\n}\r\n\r\nfunction variadic(fn, cache, serializer) {\r\n  var args = Array.prototype.slice.call(arguments, 3);\r\n  var cacheKey = serializer(args);\r\n\r\n  var computedValue = cache.get(cacheKey);\r\n  if (typeof computedValue === 'undefined') {\r\n    computedValue = fn.apply(this, args);\r\n    cache.set(cacheKey, computedValue);\r\n  }\r\n\r\n  return computedValue;\r\n}\r\n\r\nfunction assemble(fn, context, strategy, cache, serialize) {\r\n  return strategy.bind(context, fn, cache, serialize);\r\n}\r\n\r\nfunction strategyDefault(fn, options) {\r\n  var strategy = fn.length === 1 ? monadic : variadic;\r\n\r\n  return assemble(fn, this, strategy, options.cache.create(), options.serializer);\r\n}\r\n\r\nfunction strategyVariadic(fn, options) {\r\n  var strategy = variadic;\r\n\r\n  return assemble(fn, this, strategy, options.cache.create(), options.serializer);\r\n}\r\n\r\nfunction strategyMonadic(fn, options) {\r\n  var strategy = monadic;\r\n\r\n  return assemble(fn, this, strategy, options.cache.create(), options.serializer);\r\n}\r\n\r\n//\r\n// Serializer\r\n//\r\n\r\nfunction serializerDefault() {\r\n  return JSON.stringify(arguments);\r\n}\r\n\r\n//\r\n// Cache\r\n//\r\n\r\nfunction ObjectWithoutPrototypeCache() {\r\n  this.cache = Object.create(null);\r\n}\r\n\r\nObjectWithoutPrototypeCache.prototype.has = function (key) {\r\n  return key in this.cache;\r\n};\r\n\r\nObjectWithoutPrototypeCache.prototype.get = function (key) {\r\n  return this.cache[key];\r\n};\r\n\r\nObjectWithoutPrototypeCache.prototype.set = function (key, value) {\r\n  this.cache[key] = value;\r\n};\r\n\r\nvar cacheDefault = {\r\n  create: function create() {\r\n    return new ObjectWithoutPrototypeCache();\r\n  },\r\n};\r\n\r\n//\r\n// API\r\n//\r\n\r\nexport default memoize;\r\nexport const strategies = {\r\n  variadic: strategyVariadic,\r\n  monadic: strategyMonadic,\r\n};\r\n", "import memoize from './memoize';\r\n\r\nexport type DragBoundsCoords = {\r\n  /** Number of pixels from left of the document */\r\n  left: number;\r\n\r\n  /** Number of pixels from top of the document */\r\n  top: number;\r\n\r\n  /** Number of pixels from the right side of document */\r\n  right: number;\r\n\r\n  /** Number of pixels from the bottom of the document */\r\n  bottom: number;\r\n};\r\n\r\nexport type DragAxis = 'both' | 'x' | 'y' | 'none';\r\n\r\nexport type DragBounds = 'parent' | Partial<DragBoundsCoords> | string;\r\n\r\nexport type DragOptions = {\r\n  /**\r\n   * Optionally limit the drag area\r\n   *\r\n   * Accepts `parent` as prefixed value, and limits it to its parent.\r\n   *\r\n   * Or, you can specify any selector and it will be bound to that.\r\n   *\r\n   * **Note**: We don't check whether the selector is bigger than the node element.\r\n   * You yourself will have to make sure of that, or it may lead to strange behavior\r\n   *\r\n   * Or, finally, you can pass an object of type `{ top: number; right: number; bottom: number; left: number }`.\r\n   * These mimic the css `top`, `right`, `bottom` and `left`, in the sense that `bottom` starts from the bottom of the window, and `right` from right of window.\r\n   * If any of these properties are unspecified, they are assumed to be `0`.\r\n   *\r\n   * @example\r\n   * ```svelte\r\n   * <!-- Bound to parent element -->\r\n   * <div use:draggable={{ bounds: 'parent' }}>\r\n   *   Hello\r\n   * </div>\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```svelte\r\n   * <!-- Bound to body -->\r\n   * <div use:draggable={{ bounds: 'body' }}>\r\n   *   Hello\r\n   * </div>\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```svelte\r\n   * <!-- Bound to arbitrary coordinates -->\r\n   * <div use:draggable={{ bounds: { top: 100, right: 100, bottom: 100, left: 100 } }}>\r\n   *   Hello\r\n   * </div>\r\n   * ```\r\n   */\r\n  bounds?: DragBounds;\r\n\r\n  /**\r\n   * Axis on which the element can be dragged on. Valid values: `both`, `x`, `y`, `none`.\r\n   *\r\n   * - `both` - Element can move in any direction\r\n   * - `x` - Only horizontal movement possible\r\n   * - `y` - Only vertical movement possible\r\n   * - `none` - No movement at all\r\n   *\r\n   * @default 'both'\r\n   *\r\n   * @example\r\n   * ```svelte\r\n   * <!-- Drag only in x direction -->\r\n   * <div use:draggable={{ axis: 'x' }}>\r\n   *   Text\r\n   * </div>\r\n   * ```\r\n   */\r\n  axis?: DragAxis;\r\n\r\n  /**\r\n   * If true, uses `translate3d` instead of `translate` to move the element around, and the hardware acceleration kicks in.\r\n   *\r\n   * `true` by default, but can be set to `false` if [blurry text issue](https://developpaper.com/question/why-does-the-use-of-css3-translate3d-result-in-blurred-display/) occur\r\n   *\r\n   * @default true\r\n   *\r\n   * @example\r\n   * ```svelte\r\n   * <!-- Disable GPU acceleration -->\r\n   * <div use:draggable={{ gpuAcceleration: false }}>\r\n   *   Text\r\n   * </div>\r\n   * ```\r\n   */\r\n  gpuAcceleration?: boolean;\r\n\r\n  /**\r\n   * Applies `user-select: none` on `<body />` element when dragging,\r\n   * to prevent the irritating effect where dragging doesn't happen and the text is selected.\r\n   * Applied when dragging starts and removed when it stops.\r\n   *\r\n   * Can be disabled using this option\r\n   *\r\n   * @default true\r\n   *\r\n   * @example\r\n   * ```svelte\r\n   * <!-- Do not disable user selection -->\r\n   * <div use:draggable={{ applyUserSelectHack: false }}>\r\n   *   Text\r\n   * </div>\r\n   * ```\r\n   */\r\n  applyUserSelectHack?: boolean;\r\n\r\n  /**\r\n   * Disables dragging altogether.\r\n   *\r\n   * @default false\r\n   *\r\n   * @example\r\n   * ```svelte\r\n   * <!-- Disable it entirely -->\r\n   * <div use:draggable={{ disabled: true }}>\r\n   *   Text\r\n   * </div>\r\n   * ```\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Applies a grid on the page to which the element snaps to when dragging, rather than the default continuous grid.\r\n   *\r\n   * `Note`: If you're programmatically creating the grid, do not set it to [0, 0] ever, that will stop drag at all. Set it to `undefined`.\r\n   *\r\n   * @default undefined\r\n   *\r\n   * @example\r\n   * ```svelte\r\n   * <!-- Snap to a grid of 10 by 10 -->\r\n   * <div use:draggable={{ grid: [10, 10] }}>\r\n   *   Text\r\n   * </div>\r\n   * ```\r\n   */\r\n  grid?: [number, number];\r\n\r\n  /**\r\n   * Control the position manually with your own state\r\n   *\r\n   * By default, the element will be draggable by mouse/finger, and all options will work as default while dragging.\r\n   *\r\n   * But changing the `position` option will also move the draggable around. These parameters are reactive,\r\n   * so using Svelte's reactive variables as values for position will work like a charm.\r\n   *\r\n   *\r\n   * Note: If you set `disabled: true`, you'll still be able to move the draggable through state variables. Only the user interactions won't work\r\n   *\r\n   * Examples:\r\n   *\r\n   * [Changing with inputs](https://svelte.dev/repl/e1e707358b37467ba272891715878a1d?version=3.44.1)\r\n   *\r\n   * [Changing with Sliders](https://svelte.dev/repl/6b437a1cdbfc4c748520a72330c6395b?version=3.44.1)\r\n   *\r\n   * [Draggable only through external state, not user input](https://svelte.dev/repl/0eae169f272e41ba9c07ef222ed2bf66?version=3.44.1)\r\n   *\r\n   * [Comes back to original position after drag end](https://svelte.dev/repl/83d3aa8c5e154b7baf1a9c417c217d2e?version=3.44.1)\r\n   *\r\n   * [Comes back to original position with transition](https://svelte.dev/repl/bc84ed4ca22f45acbc28de3e33199883?version=3.44.1)\r\n   */\r\n  position?: { x: number; y: number };\r\n\r\n  /**\r\n   * CSS Selector of an element inside the parent node(on which `use:draggable` is applied).\r\n   *\r\n   * If it is provided, Trying to drag inside the `cancel` selector will prevent dragging.\r\n   *\r\n   * @default undefined\r\n   *\r\n   * @example\r\n   * <!-- Grid has a cancel element -->\r\n   * <div use:draggable={{ cancel: '.cancel' }}>\r\n   *   Text\r\n   *   <div class=\"cancel\">This won't drag</div>\r\n   * </div>\r\n   * ```\r\n   */\r\n  cancel?: string;\r\n\r\n  /**\r\n   * CSS Selector of an element inside the parent node(on which `use:draggable` is applied).\r\n   *\r\n   * If it is provided, Only clicking and dragging on this element will allow the parent to drag, anywhere else on the parent won't work.\r\n   *\r\n   * @default undefined\r\n   *\r\n   * @example\r\n   * <!-- Grid has a handle element -->\r\n   * <div use:draggable={{ handle: '.handel' }}>\r\n   *   This won't drag\r\n   *   <div class=\"handel\">This sure will drag!!</div>\r\n   * </div>\r\n   * ```\r\n   */\r\n  handle?: string;\r\n\r\n  /**\r\n   * Class to apply on the element on which `use:draggable` is applied.\r\n   * Note that if `handle` is provided, it will still apply class on the parent element, **NOT** the handle\r\n   *\r\n   * @default 'svelte-draggable'\r\n   */\r\n  defaultClass?: string;\r\n\r\n  /**\r\n   * Class to apply on the parent element when it is dragging\r\n   *\r\n   * @default 'svelte-draggable-dragging'\r\n   */\r\n  defaultClassDragging?: string;\r\n\r\n  /**\r\n   * Class to apply on the parent element if it has been dragged at least once.\r\n   *\r\n   * @default 'svelte-draggable-dragged'\r\n   */\r\n  defaultClassDragged?: string;\r\n\r\n  /**\r\n   * Offsets your element to the position you specify in the very beginning.\r\n   * `x` and `y` should be in pixels\r\n   *\r\n   \r\n   *\r\n   * @example\r\n   * <!-- Place the element at (300, 200) at the very beginning -->\r\n   * <div use:draggable={{ defaultPosition: { x: 300; y: 200 } }}>\r\n   *   Hello\r\n   * </div>\r\n   * ```\r\n   */\r\n  defaultPosition?: { x: number; y: number };\r\n\r\n  /**\r\n   * Fires when dragging start\r\n   */\r\n  onDragStart?: (data: { offsetX: number; offsetY: number }) => void;\r\n\r\n  /**\r\n   * Fires when dragging is going on\r\n   */\r\n  onDrag?: (data: { offsetX: number; offsetY: number }) => void;\r\n\r\n  /**\r\n   * Fires when dragging ends\r\n   */\r\n  onDragEnd?: (data: { offsetX: number; offsetY: number }) => void;\r\n};\r\n\r\nconst DEFAULT_CLASS = {\r\n  MAIN: 'svelte-draggable',\r\n  DRAGGING: 'svelte-draggable-dragging',\r\n  DRAGGED: 'svelte-draggable-dragged',\r\n};\r\n\r\nexport const draggable = (node: HTMLElement, options: DragOptions = {}) => {\r\n  let {\r\n    bounds,\r\n    axis = 'both',\r\n    gpuAcceleration = true,\r\n    applyUserSelectHack = true,\r\n    disabled = false,\r\n\r\n    grid,\r\n\r\n    position,\r\n\r\n    cancel,\r\n    handle,\r\n\r\n    defaultClass = DEFAULT_CLASS.MAIN,\r\n    defaultClassDragging = DEFAULT_CLASS.DRAGGING,\r\n    defaultClassDragged = DEFAULT_CLASS.DRAGGED,\r\n\r\n    defaultPosition = { x: 0, y: 0 },\r\n\r\n    onDragStart,\r\n    onDrag,\r\n    onDragEnd,\r\n  } = options;\r\n\r\n  let active = false;\r\n\r\n  let [translateX, translateY] = [0, 0];\r\n  let [initialX, initialY] = [0, 0];\r\n  let [previousX, previousY] = [0, 0];\r\n\r\n  // The offset of the client position relative to the node's top-left corner\r\n  let [clientToNodeOffsetX, clientToNodeOffsetY] = [0, 0];\r\n\r\n  let [xOffset, yOffset] = [defaultPosition.x, defaultPosition.y];\r\n\r\n  setTranslate(xOffset, yOffset, node, gpuAcceleration);\r\n\r\n  let canMoveInX: boolean;\r\n  let canMoveInY: boolean;\r\n\r\n  let bodyOriginalUserSelectVal = '';\r\n\r\n  let computedBounds: DragBoundsCoords;\r\n  let nodeRect: DOMRect;\r\n\r\n  let dragEl: HTMLElement | undefined;\r\n  let cancelEl: HTMLElement | undefined;\r\n\r\n  let isControlled = !!position;\r\n\r\n  function fireSvelteDragStartEvent(node: HTMLElement) {\r\n    const data = { offsetX: translateX, offsetY: translateY };\r\n\r\n    node.dispatchEvent(new CustomEvent('svelte-drag:start', { detail: data }));\r\n    onDragStart?.(data);\r\n  }\r\n\r\n  function fireSvelteDragStopEvent(node: HTMLElement) {\r\n    const data = { offsetX: translateX, offsetY: translateY };\r\n\r\n    node.dispatchEvent(new CustomEvent('svelte-drag:end', { detail: data }));\r\n    onDragEnd?.(data);\r\n  }\r\n\r\n  function fireSvelteDragEvent(node: HTMLElement, translateX: number, translateY: number) {\r\n    const data = { offsetX: translateX, offsetY: translateY };\r\n\r\n    node.dispatchEvent(new CustomEvent('svelte-drag', { detail: data }));\r\n    onDrag?.(data);\r\n  }\r\n\r\n  const listen = addEventListener;\r\n\r\n  listen('touchstart', dragStart, false);\r\n  listen('touchend', dragEnd, false);\r\n  listen('touchmove', drag, false);\r\n\r\n  listen('mousedown', dragStart, false);\r\n  listen('mouseup', dragEnd, false);\r\n  listen('mousemove', drag, false);\r\n\r\n  // On mobile, touch can become extremely janky without it\r\n  node.style.touchAction = 'none';\r\n\r\n  function dragStart(e: TouchEvent | MouseEvent) {\r\n    if (disabled) return;\r\n\r\n    node.classList.add(defaultClass);\r\n\r\n    dragEl = getDragEl(handle, node);\r\n    cancelEl = getCancelElement(cancel, node);\r\n\r\n    canMoveInX = ['both', 'x'].includes(axis);\r\n    canMoveInY = ['both', 'y'].includes(axis);\r\n\r\n    // Compute bounds\r\n    if (typeof bounds !== 'undefined') computedBounds = computeBoundRect(bounds, node);\r\n\r\n    // Compute current node's bounding client Rectangle\r\n    nodeRect = node.getBoundingClientRect();\r\n\r\n    if (isString(handle) && isString(cancel) && handle === cancel)\r\n      throw new Error(\"`handle` selector can't be same as `cancel` selector\");\r\n\r\n    if (cancelEl?.contains(dragEl))\r\n      throw new Error(\r\n        \"Element being dragged can't be a child of the element on which `cancel` is applied\"\r\n      );\r\n\r\n    if (dragEl.contains(<HTMLElement>e.target) && !cancelEl?.contains(<HTMLElement>e.target))\r\n      active = true;\r\n\r\n    if (!active) return;\r\n\r\n    if (applyUserSelectHack) {\r\n      // Apply user-select: none on body to prevent misbehavior\r\n      bodyOriginalUserSelectVal = document.body.style.userSelect;\r\n      document.body.style.userSelect = 'none';\r\n    }\r\n\r\n    // Dispatch custom event\r\n    fireSvelteDragStartEvent(node);\r\n\r\n    const { clientX, clientY } = isTouchEvent(e) ? e.touches[0] : e;\r\n\r\n    if (canMoveInX) initialX = clientX - xOffset;\r\n    if (canMoveInY) initialY = clientY - yOffset;\r\n\r\n    // Only the bounds uses these properties at the moment,\r\n    // may open up in the future if others need it\r\n    if (computedBounds) {\r\n      clientToNodeOffsetX = clientX - nodeRect.left;\r\n      clientToNodeOffsetY = clientY - nodeRect.top;\r\n    }\r\n  }\r\n\r\n  function dragEnd(e: MouseEvent | TouchEvent) {\r\n    if (disabled) return;\r\n    if (!active) return;\r\n\r\n    // Apply class defaultClassDragged\r\n    node.classList.remove(defaultClassDragging);\r\n    node.classList.add(defaultClassDragged);\r\n\r\n    if (applyUserSelectHack) document.body.style.userSelect = bodyOriginalUserSelectVal;\r\n\r\n    fireSvelteDragStopEvent(node);\r\n\r\n    if (canMoveInX) initialX = translateX;\r\n    if (canMoveInX) initialY = translateY;\r\n\r\n    active = false;\r\n  }\r\n\r\n  function drag(e: TouchEvent | MouseEvent) {\r\n    if (!active) return;\r\n\r\n    // Apply class defaultClassDragging\r\n    node.classList.add(defaultClassDragging);\r\n\r\n    e.preventDefault();\r\n\r\n    nodeRect = node.getBoundingClientRect();\r\n\r\n    const { clientX, clientY } = isTouchEvent(e) ? e.touches[0] : e;\r\n\r\n    // Get final values for clamping\r\n    let [finalX, finalY] = [clientX, clientY];\r\n\r\n    if (computedBounds) {\r\n      // Client position is limited to this virtual boundary to prevent node going out of bounds\r\n      const virtualClientBounds: DragBoundsCoords = {\r\n        left: computedBounds.left + clientToNodeOffsetX,\r\n        top: computedBounds.top + clientToNodeOffsetY,\r\n        right: computedBounds.right + clientToNodeOffsetX - nodeRect.width,\r\n        bottom: computedBounds.bottom + clientToNodeOffsetY - nodeRect.height,\r\n      };\r\n\r\n      finalX = Math.min(Math.max(finalX, virtualClientBounds.left), virtualClientBounds.right);\r\n      finalY = Math.min(Math.max(finalY, virtualClientBounds.top), virtualClientBounds.bottom);\r\n    }\r\n\r\n    if (Array.isArray(grid)) {\r\n      let [xSnap, ySnap] = grid;\r\n\r\n      if (isNaN(+xSnap) || xSnap < 0)\r\n        throw new Error('1st argument of `grid` must be a valid positive number');\r\n\r\n      if (isNaN(+ySnap) || ySnap < 0)\r\n        throw new Error('2nd argument of `grid` must be a valid positive number');\r\n\r\n      let [deltaX, deltaY] = [finalX - previousX, finalY - previousY];\r\n      [deltaX, deltaY] = snapToGrid([xSnap, ySnap], deltaX, deltaY);\r\n\r\n      if (!deltaX && !deltaY) return;\r\n\r\n      [finalX, finalY] = [previousX + deltaX, previousY + deltaY];\r\n    }\r\n\r\n    if (canMoveInX) translateX = finalX - initialX;\r\n    if (canMoveInY) translateY = finalY - initialY;\r\n\r\n    [xOffset, yOffset] = [translateX, translateY];\r\n\r\n    fireSvelteDragEvent(node, translateX, translateY);\r\n\r\n    Promise.resolve().then(() => setTranslate(translateX, translateY, node, gpuAcceleration));\r\n  }\r\n\r\n  return {\r\n    destroy: () => {\r\n      const unlisten = removeEventListener;\r\n\r\n      unlisten('touchstart', dragStart, false);\r\n      unlisten('touchend', dragEnd, false);\r\n      unlisten('touchmove', drag, false);\r\n\r\n      unlisten('mousedown', dragStart, false);\r\n      unlisten('mouseup', dragEnd, false);\r\n      unlisten('mousemove', drag, false);\r\n    },\r\n    update: (options: DragOptions) => {\r\n      // Update all the values that need to be changed\r\n      axis = options.axis || 'both';\r\n      disabled = options.disabled ?? false;\r\n      handle = options.handle;\r\n      bounds = options.bounds;\r\n      cancel = options.cancel;\r\n      applyUserSelectHack = options.applyUserSelectHack ?? true;\r\n      grid = options.grid;\r\n      gpuAcceleration = options.gpuAcceleration ?? true;\r\n\r\n      const dragged = node.classList.contains(defaultClassDragged);\r\n\r\n      node.classList.remove(defaultClass, defaultClassDragged);\r\n\r\n      defaultClass = options.defaultClass ?? DEFAULT_CLASS.MAIN;\r\n      defaultClassDragging = options.defaultClassDragging ?? DEFAULT_CLASS.DRAGGING;\r\n      defaultClassDragged = options.defaultClassDragged ?? DEFAULT_CLASS.DRAGGED;\r\n\r\n      node.classList.add(defaultClass);\r\n\r\n      if (dragged) node.classList.add(defaultClassDragged);\r\n\r\n      if (isControlled) {\r\n        xOffset = translateX = options.position?.x ?? translateX;\r\n        yOffset = translateY = options.position?.y ?? translateY;\r\n\r\n        Promise.resolve().then(() => setTranslate(translateX, translateY, node, gpuAcceleration));\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n  return Boolean((event as TouchEvent).touches && (event as TouchEvent).touches.length);\r\n}\r\n\r\nfunction isString(val: unknown): val is string {\r\n  return typeof val === 'string';\r\n}\r\n\r\nconst snapToGrid = memoize(\r\n  ([xSnap, ySnap]: [number, number], pendingX: number, pendingY: number): [number, number] => {\r\n    const x = Math.round(pendingX / xSnap) * xSnap;\r\n    const y = Math.round(pendingY / ySnap) * ySnap;\r\n    return [x, y];\r\n  }\r\n);\r\n\r\nfunction getDragEl(handle: string | undefined, node: HTMLElement) {\r\n  if (!handle) return node;\r\n\r\n  // Valid!! Let's check if this selector exists or not\r\n  const handleEl = node.querySelector<HTMLElement>(handle);\r\n  if (handleEl === null)\r\n    throw new Error(\r\n      'Selector passed for `handle` option should be child of the element on which the action is applied'\r\n    );\r\n\r\n  return handleEl!;\r\n}\r\n\r\nfunction getCancelElement(cancel: string | undefined, node: HTMLElement) {\r\n  if (!cancel) return;\r\n\r\n  const cancelEl = node.querySelector<HTMLElement>(cancel);\r\n\r\n  if (cancelEl === null)\r\n    throw new Error(\r\n      'Selector passed for `cancel` option should be child of the element on which the action is applied'\r\n    );\r\n\r\n  return cancelEl;\r\n}\r\n\r\nfunction computeBoundRect(bounds: string | Partial<DragBoundsCoords>, rootNode: HTMLElement) {\r\n  if (typeof bounds === 'object') {\r\n    // we have the left right etc\r\n    const [windowWidth, windowHeight] = [window.innerWidth, window.innerHeight];\r\n\r\n    const { top = 0, left = 0, right = 0, bottom = 0 } = bounds;\r\n\r\n    const computedRight = windowWidth - right;\r\n    const computedBottom = windowHeight - bottom;\r\n\r\n    return { top, right: computedRight, bottom: computedBottom, left };\r\n  }\r\n\r\n  // It's a string\r\n  if (bounds === 'parent') return (rootNode.parentNode as HTMLElement).getBoundingClientRect();\r\n\r\n  const node = document.querySelector<HTMLElement>(bounds);\r\n\r\n  if (node === null)\r\n    throw new Error(\"The selector provided for bound doesn't exists in the document.\");\r\n\r\n  const computedBounds = node!.getBoundingClientRect();\r\n\r\n  return computedBounds;\r\n}\r\n\r\nfunction setTranslate(xPos: number, yPos: number, el: HTMLElement, gpuAcceleration: boolean) {\r\n  el.style.transform = gpuAcceleration\r\n    ? `translate3d(${+xPos}px, ${+yPos}px, 0)`\r\n    : `translate(${+xPos}px, ${+yPos}px)`;\r\n}\r\n"],
  "mappings": ";AAIA,iBAAiB,IAAI,SAAS;AAC5B,MAAI,QAAQ,WAAW,QAAQ,QAAQ,QAAQ,QAAQ;AAEvD,MAAI,aAAa,WAAW,QAAQ,aAAa,QAAQ,aAAa;AAEtE,MAAI,WAAW,WAAW,QAAQ,WAAW,QAAQ,WAAW;AAEhE,SAAO,SAAS,IAAI;AAAA,IAClB;AAAA,IACA;AAAA;AAAA;AAQJ,qBAAqB,OAAO;AAC1B,SAAO,SAAS,QAAQ,OAAO,UAAU,YAAY,OAAO,UAAU;AAAA;AAGxE,iBAAiB,IAAI,OAAO,YAAY,KAAK;AAC3C,MAAI,WAAW,YAAY,OAAO,MAAM,WAAW;AAEnD,MAAI,gBAAgB,MAAM,IAAI;AAC9B,MAAI,OAAO,kBAAkB,aAAa;AACxC,oBAAgB,GAAG,KAAK,MAAM;AAC9B,UAAM,IAAI,UAAU;AAAA;AAGtB,SAAO;AAAA;AAGT,kBAAkB,IAAI,OAAO,YAAY;AACvC,MAAI,OAAO,MAAM,UAAU,MAAM,KAAK,WAAW;AACjD,MAAI,WAAW,WAAW;AAE1B,MAAI,gBAAgB,MAAM,IAAI;AAC9B,MAAI,OAAO,kBAAkB,aAAa;AACxC,oBAAgB,GAAG,MAAM,MAAM;AAC/B,UAAM,IAAI,UAAU;AAAA;AAGtB,SAAO;AAAA;AAGT,kBAAkB,IAAI,SAAS,UAAU,OAAO,WAAW;AACzD,SAAO,SAAS,KAAK,SAAS,IAAI,OAAO;AAAA;AAG3C,yBAAyB,IAAI,SAAS;AACpC,MAAI,WAAW,GAAG,WAAW,IAAI,UAAU;AAE3C,SAAO,SAAS,IAAI,MAAM,UAAU,QAAQ,MAAM,UAAU,QAAQ;AAAA;AAmBtE,6BAA6B;AAC3B,SAAO,KAAK,UAAU;AAAA;AAOxB,uCAAuC;AACrC,OAAK,QAAQ,OAAO,OAAO;AAAA;AAG7B,4BAA4B,UAAU,MAAM,SAAU,KAAK;AACzD,SAAO,OAAO,KAAK;AAAA;AAGrB,4BAA4B,UAAU,MAAM,SAAU,KAAK;AACzD,SAAO,KAAK,MAAM;AAAA;AAGpB,4BAA4B,UAAU,MAAM,SAAU,KAAK,OAAO;AAChE,OAAK,MAAM,OAAO;AAAA;AAGpB,IAAI,eAAe;AAAA,EACjB,QAAQ,kBAAkB;AACxB,WAAO,IAAI;AAAA;AAAA;AAQf,IAAO,kBAAQ;;;ACuJf,IAAM,gBAAgB;AAAA,EACpB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,SAAS;AAAA;AAGJ,IAAM,YAAY,CAAC,MAAmB,UAAuB,OAAO;AACzE,MAAI;AAAA,IACF;AAAA,IACA,OAAO;AAAA,IACP,kBAAkB;AAAA,IAClB,sBAAsB;AAAA,IACtB,WAAW;AAAA,IAEX;AAAA,IAEA;AAAA,IAEA;AAAA,IACA;AAAA,IAEA,eAAe,cAAc;AAAA,IAC7B,uBAAuB,cAAc;AAAA,IACrC,sBAAsB,cAAc;AAAA,IAEpC,kBAAkB,EAAE,GAAG,GAAG,GAAG;AAAA,IAE7B;AAAA,IACA;AAAA,IACA;AAAA,MACE;AAEJ,MAAI,SAAS;AAEb,MAAI,CAAC,YAAY,cAAc,CAAC,GAAG;AACnC,MAAI,CAAC,UAAU,YAAY,CAAC,GAAG;AAC/B,MAAI,CAAC,WAAW,aAAa,CAAC,GAAG;AAGjC,MAAI,CAAC,qBAAqB,uBAAuB,CAAC,GAAG;AAErD,MAAI,CAAC,SAAS,WAAW,CAAC,gBAAgB,GAAG,gBAAgB;AAE7D,eAAa,SAAS,SAAS,MAAM;AAErC,MAAI;AACJ,MAAI;AAEJ,MAAI,4BAA4B;AAEhC,MAAI;AACJ,MAAI;AAEJ,MAAI;AACJ,MAAI;AAEJ,MAAI,eAAe,CAAC,CAAC;AAErB,oCAAkC,OAAmB;AACnD,UAAM,OAAO,EAAE,SAAS,YAAY,SAAS;AAE7C,UAAK,cAAc,IAAI,YAAY,qBAAqB,EAAE,QAAQ;AAClE,+CAAc;AAAA;AAGhB,mCAAiC,OAAmB;AAClD,UAAM,OAAO,EAAE,SAAS,YAAY,SAAS;AAE7C,UAAK,cAAc,IAAI,YAAY,mBAAmB,EAAE,QAAQ;AAChE,2CAAY;AAAA;AAGd,+BAA6B,OAAmB,aAAoB,aAAoB;AACtF,UAAM,OAAO,EAAE,SAAS,aAAY,SAAS;AAE7C,UAAK,cAAc,IAAI,YAAY,eAAe,EAAE,QAAQ;AAC5D,qCAAS;AAAA;AAGX,QAAM,SAAS;AAEf,SAAO,cAAc,WAAW;AAChC,SAAO,YAAY,SAAS;AAC5B,SAAO,aAAa,MAAM;AAE1B,SAAO,aAAa,WAAW;AAC/B,SAAO,WAAW,SAAS;AAC3B,SAAO,aAAa,MAAM;AAG1B,OAAK,MAAM,cAAc;AAEzB,qBAAmB,GAA4B;AAC7C,QAAI;AAAU;AAEd,SAAK,UAAU,IAAI;AAEnB,aAAS,UAAU,QAAQ;AAC3B,eAAW,iBAAiB,QAAQ;AAEpC,iBAAa,CAAC,QAAQ,KAAK,SAAS;AACpC,iBAAa,CAAC,QAAQ,KAAK,SAAS;AAGpC,QAAI,OAAO,WAAW;AAAa,uBAAiB,iBAAiB,QAAQ;AAG7E,eAAW,KAAK;AAEhB,QAAI,SAAS,WAAW,SAAS,WAAW,WAAW;AACrD,YAAM,IAAI,MAAM;AAElB,QAAI,qCAAU,SAAS;AACrB,YAAM,IAAI,MACR;AAGJ,QAAI,OAAO,SAAsB,EAAE,WAAW,CAAC,sCAAU,SAAsB,EAAE;AAC/E,eAAS;AAEX,QAAI,CAAC;AAAQ;AAEb,QAAI,qBAAqB;AAEvB,kCAA4B,SAAS,KAAK,MAAM;AAChD,eAAS,KAAK,MAAM,aAAa;AAAA;AAInC,6BAAyB;AAEzB,UAAM,EAAE,SAAS,YAAY,aAAa,KAAK,EAAE,QAAQ,KAAK;AAE9D,QAAI;AAAY,iBAAW,UAAU;AACrC,QAAI;AAAY,iBAAW,UAAU;AAIrC,QAAI,gBAAgB;AAClB,4BAAsB,UAAU,SAAS;AACzC,4BAAsB,UAAU,SAAS;AAAA;AAAA;AAI7C,mBAAiB,GAA4B;AAC3C,QAAI;AAAU;AACd,QAAI,CAAC;AAAQ;AAGb,SAAK,UAAU,OAAO;AACtB,SAAK,UAAU,IAAI;AAEnB,QAAI;AAAqB,eAAS,KAAK,MAAM,aAAa;AAE1D,4BAAwB;AAExB,QAAI;AAAY,iBAAW;AAC3B,QAAI;AAAY,iBAAW;AAE3B,aAAS;AAAA;AAGX,gBAAc,GAA4B;AACxC,QAAI,CAAC;AAAQ;AAGb,SAAK,UAAU,IAAI;AAEnB,MAAE;AAEF,eAAW,KAAK;AAEhB,UAAM,EAAE,SAAS,YAAY,aAAa,KAAK,EAAE,QAAQ,KAAK;AAG9D,QAAI,CAAC,QAAQ,UAAU,CAAC,SAAS;AAEjC,QAAI,gBAAgB;AAElB,YAAM,sBAAwC;AAAA,QAC5C,MAAM,eAAe,OAAO;AAAA,QAC5B,KAAK,eAAe,MAAM;AAAA,QAC1B,OAAO,eAAe,QAAQ,sBAAsB,SAAS;AAAA,QAC7D,QAAQ,eAAe,SAAS,sBAAsB,SAAS;AAAA;AAGjE,eAAS,KAAK,IAAI,KAAK,IAAI,QAAQ,oBAAoB,OAAO,oBAAoB;AAClF,eAAS,KAAK,IAAI,KAAK,IAAI,QAAQ,oBAAoB,MAAM,oBAAoB;AAAA;AAGnF,QAAI,MAAM,QAAQ,OAAO;AACvB,UAAI,CAAC,OAAO,SAAS;AAErB,UAAI,MAAM,CAAC,UAAU,QAAQ;AAC3B,cAAM,IAAI,MAAM;AAElB,UAAI,MAAM,CAAC,UAAU,QAAQ;AAC3B,cAAM,IAAI,MAAM;AAElB,UAAI,CAAC,QAAQ,UAAU,CAAC,SAAS,WAAW,SAAS;AACrD,OAAC,QAAQ,UAAU,WAAW,CAAC,OAAO,QAAQ,QAAQ;AAEtD,UAAI,CAAC,UAAU,CAAC;AAAQ;AAExB,OAAC,QAAQ,UAAU,CAAC,YAAY,QAAQ,YAAY;AAAA;AAGtD,QAAI;AAAY,mBAAa,SAAS;AACtC,QAAI;AAAY,mBAAa,SAAS;AAEtC,KAAC,SAAS,WAAW,CAAC,YAAY;AAElC,wBAAoB,MAAM,YAAY;AAEtC,YAAQ,UAAU,KAAK,MAAM,aAAa,YAAY,YAAY,MAAM;AAAA;AAG1E,SAAO;AAAA,IACL,SAAS,MAAM;AACb,YAAM,WAAW;AAEjB,eAAS,cAAc,WAAW;AAClC,eAAS,YAAY,SAAS;AAC9B,eAAS,aAAa,MAAM;AAE5B,eAAS,aAAa,WAAW;AACjC,eAAS,WAAW,SAAS;AAC7B,eAAS,aAAa,MAAM;AAAA;AAAA,IAE9B,QAAQ,CAAC,aAAyB;AA1etC;AA4eM,aAAO,SAAQ,QAAQ;AACvB,iBAAW,eAAQ,aAAR,YAAoB;AAC/B,eAAS,SAAQ;AACjB,eAAS,SAAQ;AACjB,eAAS,SAAQ;AACjB,4BAAsB,eAAQ,wBAAR,YAA+B;AACrD,aAAO,SAAQ;AACf,wBAAkB,eAAQ,oBAAR,YAA2B;AAE7C,YAAM,UAAU,KAAK,UAAU,SAAS;AAExC,WAAK,UAAU,OAAO,cAAc;AAEpC,qBAAe,eAAQ,iBAAR,YAAwB,cAAc;AACrD,6BAAuB,eAAQ,yBAAR,YAAgC,cAAc;AACrE,4BAAsB,eAAQ,wBAAR,YAA+B,cAAc;AAEnE,WAAK,UAAU,IAAI;AAEnB,UAAI;AAAS,aAAK,UAAU,IAAI;AAEhC,UAAI,cAAc;AAChB,kBAAU,aAAa,qBAAQ,aAAR,mBAAkB,MAAlB,YAAuB;AAC9C,kBAAU,aAAa,qBAAQ,aAAR,mBAAkB,MAAlB,YAAuB;AAE9C,gBAAQ,UAAU,KAAK,MAAM,aAAa,YAAY,YAAY,MAAM;AAAA;AAAA;AAAA;AAAA;AAMhF,sBAAsB,OAAqD;AACzE,SAAO,QAAS,MAAqB,WAAY,MAAqB,QAAQ;AAAA;AAGhF,kBAAkB,KAA6B;AAC7C,SAAO,OAAO,QAAQ;AAAA;AAGxB,IAAM,aAAa,gBACjB,CAAC,CAAC,OAAO,QAA0B,UAAkB,aAAuC;AAC1F,QAAM,IAAI,KAAK,MAAM,WAAW,SAAS;AACzC,QAAM,IAAI,KAAK,MAAM,WAAW,SAAS;AACzC,SAAO,CAAC,GAAG;AAAA;AAIf,mBAAmB,QAA4B,MAAmB;AAChE,MAAI,CAAC;AAAQ,WAAO;AAGpB,QAAM,WAAW,KAAK,cAA2B;AACjD,MAAI,aAAa;AACf,UAAM,IAAI,MACR;AAGJ,SAAO;AAAA;AAGT,0BAA0B,QAA4B,MAAmB;AACvE,MAAI,CAAC;AAAQ;AAEb,QAAM,WAAW,KAAK,cAA2B;AAEjD,MAAI,aAAa;AACf,UAAM,IAAI,MACR;AAGJ,SAAO;AAAA;AAGT,0BAA0B,QAA4C,UAAuB;AAC3F,MAAI,OAAO,WAAW,UAAU;AAE9B,UAAM,CAAC,aAAa,gBAAgB,CAAC,OAAO,YAAY,OAAO;AAE/D,UAAM,EAAE,MAAM,GAAG,OAAO,GAAG,QAAQ,GAAG,SAAS,MAAM;AAErD,UAAM,gBAAgB,cAAc;AACpC,UAAM,iBAAiB,eAAe;AAEtC,WAAO,EAAE,KAAK,OAAO,eAAe,QAAQ,gBAAgB;AAAA;AAI9D,MAAI,WAAW;AAAU,WAAQ,SAAS,WAA2B;AAErE,QAAM,OAAO,SAAS,cAA2B;AAEjD,MAAI,SAAS;AACX,UAAM,IAAI,MAAM;AAElB,QAAM,iBAAiB,KAAM;AAE7B,SAAO;AAAA;AAGT,sBAAsB,MAAc,MAAc,IAAiB,iBAA0B;AAC3F,KAAG,MAAM,YAAY,kBACjB,eAAe,CAAC,WAAW,CAAC,eAC5B,aAAa,CAAC,WAAW,CAAC;AAAA;",
  "names": []
}
